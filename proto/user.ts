// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface FindUserByEmailDto {
  email: string;
}

export interface Empty {
}

export interface UserList {
  users: UserResponse[];
}

export interface FineOneUserDto {
  id: string;
}

export interface VerifyOneUserDto {
  isVerified: string;
}

export interface CreateUserDto {
  fullName: string;
  email: string;
  phoneNumber: string;
  passwordHash: string;
  /** 'customer', 'delivery_personnel', 'restaurant' */
  role: string;
  /** 'pending', 'verified', 'rejected' */
  isVerified: string;
}

export interface UpdateUserDto {
  userId: string;
  fullName: string;
  phoneNumber: string;
  role: string;
  isVerified: string;
}

export interface UserResponse {
  userId: string;
  fullName: string;
  email: string;
  phoneNumber: string;
  role: string;
  isVerified: string;
  createdAt: string;
  updatedAt: string;
  passwordHash: string;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  createUser(request: CreateUserDto): Observable<UserResponse>;

  findAllUsers(request: Empty): Observable<UserList>;

  findUserById(request: FineOneUserDto): Observable<UserResponse>;

  updateUser(request: UpdateUserDto): Observable<UserResponse>;

  deleteUser(request: FineOneUserDto): Observable<UserResponse>;

  verifyUser(request: FineOneUserDto): Observable<UserResponse>;

  findUserByEmail(request: FindUserByEmailDto): Observable<UserResponse>;
}

export interface UserServiceController {
  createUser(request: CreateUserDto): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  findAllUsers(request: Empty): Promise<UserList> | Observable<UserList> | UserList;

  findUserById(request: FineOneUserDto): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  updateUser(request: UpdateUserDto): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  deleteUser(request: FineOneUserDto): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  verifyUser(request: FineOneUserDto): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  findUserByEmail(request: FindUserByEmailDto): Promise<UserResponse> | Observable<UserResponse> | UserResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createUser",
      "findAllUsers",
      "findUserById",
      "updateUser",
      "deleteUser",
      "verifyUser",
      "findUserByEmail",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
