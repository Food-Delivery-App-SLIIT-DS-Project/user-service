// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'user';

export interface Status {
  status: string;
}

export interface UpdateRefreshTokenRequest {
  userId: string;
  refreshToken: string;
}

export interface UpdateRefreshTokenResponse {
  refreshToken: string;
}

export interface DeleteRefreshTokenRequest {
  userId: string;
  refreshToken: string;
}

export interface DeleteRefreshTokenResponse {
  success: boolean;
}

export interface FindUserByEmailDto {
  email: string;
}

export interface Empty {}

export interface UserList {
  users: UserResponse[];
}

export interface FineOneUserDto {
  userId: string;
}

export interface VerifyOneUserDto {
  userId: string;
  isVerified: string;
}

export interface CreateUserDto {
  userId: string;
  fullName: string;
  email: string;
  phoneNumber: string;
  passwordHash: string;
  /** 'customer', 'delivery_personnel', 'restaurant' */
  role: string;
  /** 'pending', 'verified', 'rejected' */
  isVerified: string;
  refreshToken: string;
}

export interface UpdateUserDto {
  userId: string;
  fullName: string;
  phoneNumber: string;
  role: string;
  isVerified: string;
}

export interface UserResponse {
  userId: string;
  fullName: string;
  email: string;
  phoneNumber: string;
  role: string;
  isVerified: string;
  createdAt: string;
  updatedAt: string;
  passwordHash: string;
}

export const USER_PACKAGE_NAME = 'user';

export interface UserServiceClient {
  createUser(request: CreateUserDto): Observable<UserResponse>;

  findAllUsers(request: Empty): Observable<UserList>;

  findAllCustomers(request: Empty): Observable<UserList>;

  findAllDeliveryPersonnel(request: Empty): Observable<UserList>;

  findAllRestaurants(request: Empty): Observable<UserList>;

  findAllUserByIsVerified(request: Status): Observable<UserList>;

  findAllCustomerByIsVerified(request: Status): Observable<UserList>;

  findAllDeliveryPersonnelByIsVerified(request: Status): Observable<UserList>;

  findAllRestaurantByIsVerified(request: Status): Observable<UserList>;

  findUserById(request: FineOneUserDto): Observable<UserResponse>;

  updateUser(request: UpdateUserDto): Observable<UserResponse>;

  deleteUser(request: FineOneUserDto): Observable<UserResponse>;

  verifyUser(request: VerifyOneUserDto): Observable<UserResponse>;

  findUserByEmail(request: FindUserByEmailDto): Observable<UserResponse>;

  deleteRefreshToken(
    request: DeleteRefreshTokenRequest,
  ): Observable<DeleteRefreshTokenResponse>;

  updateRefreshToken(
    request: UpdateRefreshTokenRequest,
  ): Observable<UpdateRefreshTokenResponse>;
}

export interface UserServiceController {
  createUser(
    request: CreateUserDto,
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  findAllUsers(
    request: Empty,
  ): Promise<UserList> | Observable<UserList> | UserList;

  findAllCustomers(
    request: Empty,
  ): Promise<UserList> | Observable<UserList> | UserList;

  findAllDeliveryPersonnel(
    request: Empty,
  ): Promise<UserList> | Observable<UserList> | UserList;

  findAllRestaurants(
    request: Empty,
  ): Promise<UserList> | Observable<UserList> | UserList;

  findAllUserByIsVerified(
    request: Status,
  ): Promise<UserList> | Observable<UserList> | UserList;

  findAllCustomerByIsVerified(
    request: Status,
  ): Promise<UserList> | Observable<UserList> | UserList;

  findAllDeliveryPersonnelByIsVerified(
    request: Status,
  ): Promise<UserList> | Observable<UserList> | UserList;

  findAllRestaurantByIsVerified(
    request: Status,
  ): Promise<UserList> | Observable<UserList> | UserList;

  findUserById(
    request: FineOneUserDto,
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  updateUser(
    request: UpdateUserDto,
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  deleteUser(
    request: FineOneUserDto,
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  verifyUser(
    request: VerifyOneUserDto,
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  findUserByEmail(
    request: FindUserByEmailDto,
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  deleteRefreshToken(
    request: DeleteRefreshTokenRequest,
  ):
    | Promise<DeleteRefreshTokenResponse>
    | Observable<DeleteRefreshTokenResponse>
    | DeleteRefreshTokenResponse;

  updateRefreshToken(
    request: UpdateRefreshTokenRequest,
  ):
    | Promise<UpdateRefreshTokenResponse>
    | Observable<UpdateRefreshTokenResponse>
    | UpdateRefreshTokenResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createUser',
      'findAllUsers',
      'findAllCustomers',
      'findAllDeliveryPersonnel',
      'findAllRestaurants',
      'findAllUserByIsVerified',
      'findAllCustomerByIsVerified',
      'findAllDeliveryPersonnelByIsVerified',
      'findAllRestaurantByIsVerified',
      'findUserById',
      'updateUser',
      'deleteUser',
      'verifyUser',
      'findUserByEmail',
      'deleteRefreshToken',
      'updateRefreshToken',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USER_SERVICE_NAME = 'UserService';
